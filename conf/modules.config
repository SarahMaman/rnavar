/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.suffix          = File name ext.suffix output files. Not available for nf-core modules
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

// GENERAL CONFIG

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

// PREPARE FASTQ AND GENOME

process {
    withName: CAT_FASTQ {
        publishDir = [
            path: { "${params.outdir}/fastq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_merged_fastq
        ]
    }
    withName: STAR_GENOMEGENERATE {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

}

// ALIGNMENT
process {
    // ALIGN_STAR
    withName: '.*:ALIGN_STAR:STAR_ALIGN' {
        ext.args   = [
            '--outSAMtype BAM Unsorted',
            '--readFilesCommand zcat',
            params.save_unaligned ? '--outReadsUnmapped Fastx' : '',
            params.read_length ? "--sjdbOverhang ${params.read_length - 1}" : '',
            params.star_twopass ? '--twopassMode Basic' : ''
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/${meta.id}/log" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}'
            ],
            [
                path: { "${params.outdir}/preprocessing/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                enabled: params.save_align_intermeds
            ],
            [
                path: { "${params.outdir}/preprocessing/${meta.id}/unmapped" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_unaligned
            ]
        ]
    }
}

// POST ALIGNMENT AND PREPROCESSING BAM

process {

    withName: 'NFCORE_RNAVAR:RNAVAR:ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        ext.suffix = '.sorted'
        publishDir = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.bam",
            enabled: params.save_align_intermeds
        ]
    }
    withName: 'NFCORE_RNAVAR:RNAVAR:ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.args   = params.bam_csi_index ? '-c' : ''
        ext.suffix = '.sorted'
        publishDir = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{bai,csi}",
            enabled: params.save_align_intermeds
        ]
    }
    withName: 'NFCORE_RNAVAR:RNAVAR:GATK4_INTERVALLISTTOOLS' {
        ext.args   = [
            '--SUBDIVISION_MODE BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW'
            '--UNIQUE true'
            '--SORT true'
            params.scatter_count ? "--SCATTER_COUNT $params.scatter_count" : ''
        ].join(' ').trim()
    }
    withName: 'NFCORE_RNAVAR:RNAVAR:MARKDUPLICATES:PICARD_MARKDUPLICATES' {
        ext.args   = [
            'ASSUME_SORTED=true',
            'VALIDATION_STRINGENCY=LENIENT',
            params.remove_duplicates ? 'REMOVE_DUPLICATES=true' : ''
        ].join(' ').trim()
        ext.suffix  = '.markdup.sorted'
        publish_dir = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.bam"
        ]
    }
    withName: 'NFCORE_RNAVAR:RNAVAR:MARKDUPLICATES:SAMTOOLS_INDEX' {
        ext.args    = params.bam_csi_index ? '-c' : ''
        ext.suffix  = '.markdup.sorted'
        publish_dir = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{bai,csi}"
        ]
    }
    withName: 'NFCORE_RNAVAR:RNAVAR:GATK4_BASERECALIBRATOR' {
        ext.args    =  '--use-original-qualities'
    }
    withName: 'NFCORE_RNAVAR:RNAVAR:RECALIBRATE:APPLYBQSR' {
        ext.args    = [
            '--use-original-qualities',
            '--add-output-sam-program-record'
        ].join(' ').trim()
        ext.suffix  = '.recal'
        publish_dir = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{bam}"
        ]
    }
    withName: 'NFCORE_RNAVAR:RNAVAR:RECALIBRATE:SAMTOOLS_INDEX' {
        ext.args    = params.bam_csi_index ? '-c' : ''
        ext.suffix  = '.recal'
        publish_dir = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{bai,csi}"
        ]
    }
    withName: 'NFCORE_RNAVAR:RNAVAR:RECALIBRATE:SAMTOOLS_STATS' {
        publish_dir = [
            path: { "${params.outdir}/reports/samtools_stats/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{stats,flagstat}"
        ]
    }
}

// VARIANT CALLING AND FILTERING

process {
    withName: 'NFCORE_RNAVAR:RNAVAR:GATK4_HAPLOTYPECALLER' {
        ext.args    = [
            '-dont-use-soft-clipped-bases'
            params.stand_call_conf ? "--standard-min-confidence-threshold-for-calling $params.stand_call_conf" : ''
        ].join(' ').trim()
    }
    withName: 'NFCORE_RNAVAR:RNAVAR:GATK4_MERGEVCFS' {
        ext.suffix  = '.haplotypecaller'
        publish_dir = [
            path: { "${params.outdir}/variant_calling/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz}"
        ]
    }
    withName: 'NFCORE_RNAVAR:RNAVAR:GATK4_INDEXFEATUREFILE' {
        ext.suffix  = '.haplotypecaller'
        publish_dir = [
            path: { "${params.outdir}/variant_calling/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz.tbi}"
        ]
    }
    withName: 'NFCORE_RNAVAR:RNAVAR:GATK4_VARIANTFILTRATION' {
        ext.suffix  = '.filtered'
        ext.args    = [
            params.window ? "--window $params.window" : ''
            params.cluster ? "--cluster $params.cluster" : ''
            params.fs_filter ? "--filter-name \"FS\" --filter \"FS > $params.fs_filter\" " : ''
            params.qd_filter ? "--filter-name \"QD\" --filter \"QD < $params.qd_filter\" " : ''
        ].join(' ').trim()
        publish_dir = [
            path: { "${params.outdir}/variant_calling/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz,vcf.gz.tbi}"
        ]
    }
}

// VARIANT ANNOTATION

process {
    withName: 'ENSEMBLVEP' {
        ext.args    = '--everything --filter_common --per_gene --total_length --offline'
        container   = { "nfcore/vep:104.3.${params.genome}" }
        publishDir  = [ enabled: false ]
    }
    withName: 'SNPEFF' {
        ext.args    = '-nodownload -canon -v'
        container   = { "nfcore/snpeff:5.0.${params.genome}" }
        publishDir  = [ enabled: false ]
    }
    withName: 'ANNOTATION_BGZIPTABIX' {
        publishDir       = [
            path: { "${params.outdir}/variant_annotation/${meta.id}" },
            enabled: true,
            pattern: "*{gz,gz.tbi}"
        ]
    }
}

if(!params.skip_variantannotation && ('merge' in tools || 'snpeff' in tools)) {
    process {
        withName: 'NFCORE_RNAVAR:RNAVAR:ANNOTATE:SNPEFF_ANNOTATE:TABIX_BGZIPTABIX' {
            ext.prefix = {"${meta.id}_snpEff.ann.vcf"}
        }
    }
}

if(!params.skip_variantannotation && ('vep' in tools)) {
    process {
        withName: 'NFCORE_RNAVAR:RNAVAR:ANNOTATE:ENSEMBLVEP_ANNOTATE:TABIX_BGZIPTABIX' {
            ext.prefix = {"${meta.id}_VEP.ann.vcf"}
        }
    }
}

if(!params.skip_variantannotation && ('merge' in tools) {
    process {
        withName: 'NFCORE_RNAVAR:RNAVAR:ANNOTATE:MERGE_ANNOTATE:TABIX_BGZIPTABIX' {
            ext.prefix = {"${meta.id}_snpEff_VEP.ann.vcf"}
        }
    }

}

// QC

process {
    withName: MULTIQC {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/reports"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: FASTQC {
        ext.args    = '--quiet'
        publishDir  = [
            path: { "${params.outdir}/reports/fastqc/${meta.id}" }
            enabled: false
        ]
    }
}
